{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OAEI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SApBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCNhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,+DAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVrB,kBAgBdM,GAhBc,4CAAH,sDCATO,EAAc,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OAFAc,QAAQC,IAAIN,EAAIC,EAAOV,GAGnB,sBAAKgB,UAAU,OAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCLHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECSb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAwBtC,OAjBAC,qBAAU,WAEN1B,EAAQC,GACH0B,MAAK,SAAAC,GACFC,YAAW,WAEPJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEf,UAIX,CAACtB,IAGGuB,ED/BqBM,CAAa7B,GAAhCa,EAF4B,EAEjCN,KAAae,EAFoB,EAEpBA,QAGjB,OACI,eAAC,WAAD,WACI,uDACJ,6BAAMtB,IAEJsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEhBpBmB,EAAe,WAAM,MAMM5C,mBAAS,CAAC,KANhB,mBAMvB6C,EANuB,KAMX9C,EANW,KAiB9B,OACI,qCACI,oBAAIiC,UAAU,SAAd,0BACA,oBAAIA,UAAU,YAAd,8CAEA,cAAC,EAAD,CAAajC,cAAeA,IAE5B,uBACA,uBAEA,6BAEQ8C,EAAWtB,KAAI,SAAAT,GAAQ,OAEnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MC9BjCgC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e3fece04.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  \r\n    const [inputValue, setInputValue] = useState(''); //'' String vacio mejor\r\n  \r\n    const handleInputChange =(e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length>2) {\r\n            setCategories(cats => [inputValue, ...cats, ]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n            </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n  export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&limit=10&api_key=cpocZtotNSdXnu2pEFpFxvtDeRd03095`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n    console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\nconst { data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <h5>FOTOS ENCONTRADAS DE:</h5 >\r\n        <h3 >{category}</h3>\r\n\r\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n        <div className=\"card-grid\">\r\n            {\r\n                images.map(img => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img} />\r\n                ))\r\n\r\n            }\r\n\r\n        </div >\r\n        </Fragment> \r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\n//Todos los hooks empiezan con use\r\n//ej. useState, useEffect, etc\r\n//los hooks son funciones\r\n//rafc para functional component que podemos usarlo para un hook\r\n//la importación de react no es necesaria a menos que retornemos jsx\r\n//si solo retornamos javascript no es necesario la importación de react\r\n//recuerda rafc para crear hooks\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setTimeout(() => {                   \r\n                 \r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                },3000);\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n    return state; // {data: [],loading: true}\r\n\r\n\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    //es una constante, las constantes no mutan\r\n    //si hay que añadir una categoria o quitar no es la manera\r\n\r\n    const [categories, setCategories] = useState(['']);\r\n\r\n    // const handleAdd = () => {\r\n\r\n    // setCategories([...categories, 'HunterX']); //Añade Hunter al final\r\n    //setCategories(['HunterX',...categories, ]); //Añade Hunter al final\r\n\r\n    //otra manera\r\n\r\n    // setCategories(cats => [...cats, 'HunterX']);\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"titulo\">GifExpertApp</h1>\r\n            <h2 className=\"subtitulo\">Encuentra tus imagenes favoritas</h2>\r\n\r\n            <AddCategory setCategories={setCategories} />\r\n\r\n            <br />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>\r\n                      \r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n\r\n                        />\r\n                    \r\n                    )\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import { AddCategory } from './components/AddCategory';\nimport {GifExpertApp} from \"./GifExpertApp\";\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}